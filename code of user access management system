To implement a basic **User Access Management System** using **Java Servlets**, **JSP**, and **PostgreSQL**, I'll provide the code for each of the components you've outlined in your requirements.

### Project Structure

- **Web Pages (JSP)**:
    - `signup.jsp`
    - `login.jsp`
    - `createSoftware.jsp` (for Admin)
    - `requestAccess.jsp` (for Employees)
    - `pendingRequests.jsp` (for Managers)

- **Servlets**:
    - `SignUpServlet.java`
    - `LoginServlet.java`
    - `SoftwareServlet.java` (for Admin to create software)
    - `RequestServlet.java` (for Employees to request access)
    - `ApprovalServlet.java` (for Managers to approve/reject requests)

- **Database**:
    - PostgreSQL tables: `users`, `software`, `requests`

### Database Setup (PostgreSQL)

Here are the SQL commands to create the required tables:

```sql
-- Create users table
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role TEXT CHECK(role IN ('Employee', 'Manager', 'Admin')) NOT NULL DEFAULT 'Employee'
);

-- Create software table
CREATE TABLE software (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    access_levels TEXT[] -- Stores ['Read', 'Write', 'Admin']
);

-- Create requests table
CREATE TABLE requests (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id),
    software_id INT REFERENCES software(id),
    access_type TEXT CHECK(access_type IN ('Read', 'Write', 'Admin')),
    reason TEXT,
    status TEXT CHECK(status IN ('Pending', 'Approved', 'Rejected')) DEFAULT 'Pending'
);
```

### 1. `SignUpServlet.java`

```java
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.sql.*;

public class SignUpServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        // Simple validation (you can extend this)
        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {
            response.sendRedirect("signup.jsp?error=invalid");
            return;
        }

        // Store in the database
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/yourdb", "user", "password")) {
            String sql = "INSERT INTO users (username, password, role) VALUES (?, ?, 'Employee')";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, username);
                stmt.setString(2, password);
                int rowsAffected = stmt.executeUpdate();
                if (rowsAffected > 0) {
                    response.sendRedirect("login.jsp");
                } else {
                    response.sendRedirect("signup.jsp?error=fail");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendRedirect("signup.jsp?error=exception");
        }
    }
}
```

### 2. `LoginServlet.java`

```java
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.sql.*;

public class LoginServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/yourdb", "user", "password")) {
            String sql = "SELECT id, role FROM users WHERE username = ? AND password = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, username);
                stmt.setString(2, password);
                ResultSet rs = stmt.executeQuery();
                
                if (rs.next()) {
                    int userId = rs.getInt("id");
                    String role = rs.getString("role");

                    // Create a session
                    HttpSession session = request.getSession();
                    session.setAttribute("userId", userId);
                    session.setAttribute("role", role);

                    // Redirect based on role
                    if ("Employee".equals(role)) {
                        response.sendRedirect("requestAccess.jsp");
                    } else if ("Manager".equals(role)) {
                        response.sendRedirect("pendingRequests.jsp");
                    } else if ("Admin".equals(role)) {
                        response.sendRedirect("createSoftware.jsp");
                    }
                } else {
                    response.sendRedirect("login.jsp?error=invalid_credentials");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendRedirect("login.jsp?error=exception");
        }
    }
}
```

### 3. `SoftwareServlet.java` (Admin Only)

```java
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.sql.*;

public class SoftwareServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String softwareName = request.getParameter("softwareName");
        String description = request.getParameter("description");
        String[] accessLevels = request.getParameterValues("accessLevels");

        if (softwareName == null || description == null || accessLevels == null) {
            response.sendRedirect("createSoftware.jsp?error=invalid_input");
            return;
        }

        // Store in the database
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/yourdb", "user", "password")) {
            String sql = "INSERT INTO software (name, description, access_levels) VALUES (?, ?, ?)";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, softwareName);
                stmt.setString(2, description);
                stmt.setArray(3, conn.createArrayOf("TEXT", accessLevels));
                stmt.executeUpdate();
                response.sendRedirect("createSoftware.jsp?success=true");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendRedirect("createSoftware.jsp?error=exception");
        }
    }
}
```

### 4. `RequestServlet.java` (Employee Requests Access)

```java
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.sql.*;

public class RequestServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int userId = (int) request.getSession().getAttribute("userId");
        int softwareId = Integer.parseInt(request.getParameter("softwareId"));
        String accessType = request.getParameter("accessType");
        String reason = request.getParameter("reason");

        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/yourdb", "user", "password")) {
            String sql = "INSERT INTO requests (user_id, software_id, access_type, reason, status) VALUES (?, ?, ?, ?, 'Pending')";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setInt(1, userId);
                stmt.setInt(2, softwareId);
                stmt.setString(3, accessType);
                stmt.setString(4, reason);
                stmt.executeUpdate();
                response.sendRedirect("requestAccess.jsp?success=true");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendRedirect("requestAccess.jsp?error=exception");
        }
    }
}
```

### 5. `ApprovalServlet.java` (Manager Approves/Rejects Requests)

```java
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.sql.*;

public class ApprovalServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int requestId = Integer.parseInt(request.getParameter("requestId"));
        String action = request.getParameter("action"); // "approve" or "reject"

        String status = "Rejected";
        if ("approve".equals(action)) {
            status = "Approved";
        }

        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/yourdb", "user", "password")) {
            String sql = "UPDATE requests SET status = ? WHERE id = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, status);
                stmt.setInt(2, requestId);
                stmt.executeUpdate();
                response.sendRedirect("pendingRequests.jsp?success=true");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendRedirect("pendingRequests.jsp?error=exception");
        }
    }
}
```

### 6. JSP Pages

Each of the JSP pages (`signup.jsp`, `login.jsp`, `createSoftware.jsp`, `requestAccess.jsp`, `pendingRequests.jsp`) will contain basic forms for user interactions.

For example, `signup.jsp`:

```jsp
<form action="SignUpServlet" method="POST">
    <label>Username:</label><input type="text" name="username">
    <label>Password:</label><input type="password" name="password">
    <button type="submit">Sign Up</button>
</form>
```

Similarly, the other JSP pages will have their forms to handle login, software creation, and access requests.

### Conclusion

This is a basic setup that covers the essential functionalities of the **User Access Management System** as described. The code includes:

- Servlet handling for **Sign-Up**, **Login**, **Software Creation**, **Access Requests**, and **Approval**.
-
